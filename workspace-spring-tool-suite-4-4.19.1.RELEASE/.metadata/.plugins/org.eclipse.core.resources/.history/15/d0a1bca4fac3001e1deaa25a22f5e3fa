package com.excel.demoproject.repository;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Repository;
import org.springframework.web.multipart.MultipartFile;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBSaveExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ExpectedAttributeValue;

import com.excel.demoproject.dto.MasterResdto;
import com.excel.demoproject.entity.Employee;


import io.micrometer.common.util.StringUtils;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.model.BatchWriteItemEnhancedRequest;
import software.amazon.awssdk.enhanced.dynamodb.model.WriteBatch;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;

@Repository
public class EmployeeRepository {
	
	@Autowired
    private DynamoDBMapper dynamoDBMapper;
	
	
	
	 

	
	 
	private static final String EXCEL_EXTENSION = ".xlsx"; 

    public Employee save(Employee employee) {
        dynamoDBMapper.save(employee);
        return employee;
    }

    public Employee getEmployeeById(String employeeId) {
        return dynamoDBMapper.load(Employee.class, employeeId);
    }

    public String delete(String employeeId) {
        Employee emp = dynamoDBMapper.load(Employee.class, employeeId);
        dynamoDBMapper.delete(emp);
        return "Employee Deleted!";
    }

    public String update(String employeeId, Employee employee) {
        dynamoDBMapper.save(employee,
                new DynamoDBSaveExpression()
        .withExpectedEntry("employeeId",
                new ExpectedAttributeValue(
                        new AttributeValue().withS(employeeId)
                )));
        return employeeId;
    }

	public boolean isValidExcelFile(MultipartFile file) {
		// TODO Auto-generated method stub
		String originalFilename = file.getOriginalFilename();

		return (originalFilename != null && originalFilename.toLowerCase().endsWith(EXCEL_EXTENSION));
	}

	

//	public void saveToDynamoDB(List<Employee> list) {
//		// TODO Auto-generated method stub
//		EnhancedDynamoDbTable<Employee> table = enhancedClient.table("employee", Employee.class);
//
//        WriteBatch.Builder<Employee> writeBatchBuilder = WriteBatch.builder(Employee.class);
//        list.forEach(writeBatchBuilder::addPutItem);
//
//        table.writeBatches().executeWriteBatch(writeBatchBuilder.build());
//    }
//		
//	}
	
	
	
	
	
	
	
	
	
	
	public ResponseEntity<MasterResdto> readExcel(MultipartFile file) {
		// TODO Auto-generated method stub
		
		
		  if (file == null || file.isEmpty()) {
		        MasterResdto res = new MasterResdto();
		        res.setMessage("File is null or empty");
		        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(res);
		    }

		    List<Employee> list = new ArrayList<>();
		    try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {
		        Sheet sheet = workbook.getSheetAt(0);
		        int rowNumber = 0;
		        Iterator<Row> rowIterator = sheet.iterator();

		        while (rowIterator.hasNext()) {
		            Row row = rowIterator.next();
		            Boolean isRowEmpty = checkIfRowIsEmpty(row);

		            if (isRowEmpty) {
		                MasterResdto res = new MasterResdto();
		                res.setMessage("Data not found");
		                return ResponseEntity.status(HttpStatus.OK).body(res);
		            }

		            if (rowNumber == 0) {
		                rowNumber++;
		                continue;
		            }

		            Iterator<Cell> cellIterator = row.cellIterator();
		            Employee dto = new Employee();

		            if (cellIterator.hasNext()) {
		                dto.setFirstName(cellIterator.next().toString());
		            }
		            if (cellIterator.hasNext()) {
		                dto.setLastName(cellIterator.next().toString());
		            }
		            if (cellIterator.hasNext()) {
		                dto.setEmail(cellIterator.next().toString());
		            }
                    list.add(dto);
		            dynamoDBMapper.save(dto);
		        }

		        MasterResdto res = new MasterResdto();
		        res.setResult(true);
		        res.setMessage("File uploaded successfully");
		        res.setStatuscode(200);
		        res.setList(list);

		        return ResponseEntity.status(HttpStatus.ACCEPTED).body(res);
		    } catch (IOException e) {
		        // Handle the exception
		        return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		    }
	}

	
	private boolean checkIfRowIsEmpty(Row row) {
		 if (row == null) {
		        return true;
		    }
		    if (row.getLastCellNum() <= 0) {
		        return true;
		    }
		    for (int cellNum = row.getFirstCellNum(); cellNum < row.getLastCellNum(); cellNum++) {
		        Cell cell = row.getCell(cellNum);
		        if (cell != null && cell.getCellType() != CellType.BLANK && StringUtils.isNotBlank(cell.toString())) {
		            return false;
		        }
		    }
		    return true;
	}

	public Employee getEmployeeByfname(String firstName) {
		
		
		
		// TODO Auto-generated method stub
		return dynamoDBMapper.load(Employee.class, firstName);
		
		
		
		
	}

	public List<Employee> getEmployeesByFname(String firstName) {
		
		// TODO Auto-generated method stub
		DynamoDBScanExpression scanExpression = new DynamoDBScanExpression()
	            .withFilterExpression("firstName = :val1")
	            .withExpressionAttributeValues(Collections.singletonMap(":val1", new AttributeValue().withS(firstName)));
 
	    return dynamoDBMapper.scan(Employee.class, scanExpression);
	}

	public List<Employee> getEmployeesByInputKey(String inputKey) {
		// TODO Auto-generated method stub
		 try {
	            Map<String, AttributeValue> attributeValues = new HashMap<>();
	            attributeValues.put(":val1", new AttributeValue().withS(inputKey));

	            DynamoDBQueryExpression<Employee> queryExpression = new DynamoDBQueryExpression<Employee>()
	                    .withKeyConditionExpression("inputKey = :val1")
	                    .withExpressionAttributeValues(attributeValues);

	            return dynamoDBMapper.query(Employee.class, queryExpression);

	        } catch (Exception e) {
	            // Handle exceptions appropriately (log, throw, etc.)
	            e.printStackTrace(); // Example: print the stack trace for simplicity
	            return Collections.emptyList(); // Return an empty list or handle error response
	        }
	    }
	}


	
	
	
	
}
